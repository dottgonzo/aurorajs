var exec = require("promised-exec");
var Promise = require("bluebird");
var Os = require("os");
function prepare_address(addresses) {
    var readdr = [];
    for (var i = 0; i < addresses.length; i++) {
        readdr[i] = { uuid: addresses[i].uuid, dev: addresses[i].dev, address: addresses[i].address };
    }
    return JSON.stringify(readdr);
}
var AJS = (function () {
    function AJS(addresses, timezone, exe) {
        this.addresses = addresses;
        this.timezone = timezone;
        var cmd;
        if (exe) {
            cmd = exe;
        }
        else {
            if (Os.arch() == "arm" && Os.cpus()[0].model == "ARMv7 Processor rev 5 (v7l)") {
                console.log("aurora arm");
                cmd = __dirname + "/bin/rasp2/aurora.bin";
            }
            else if (Os.arch() == "x64") {
                console.log("aurora x64");
                cmd = __dirname + "/bin/x64/aurora.bin";
            }
            else if (Os.arch() == "ia32") {
                console.log("aurora ia32");
                cmd = __dirname + "/bin/ia32/aurora.bin";
            }
            else {
                console.log("aurora");
                cmd = "aurora";
            }
        }
        this.exec = cmd;
    }
    AJS.prototype.data = function () {
        var exe = this.exec;
        var addresses = prepare_address(this.addresses);
        var timezone = this.timezone;
        return new Promise(function (resolve, reject) {
            exec(__dirname + "/aurora.sh -a \"" + addresses + "\" -t \"" + timezone + "\" -e \"" + exe + "\"").then(function (data) {
                resolve(JSON.parse(data));
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    AJS.prototype.reconfigure = function (opt) {
        if (opt) {
            if (opt.addresses)
                this.addresses = opt.addresses;
            if (opt.timezone)
                this.timezone = opt.timezone;
            if (opt.exec)
                this.exec = opt.exec;
        }
    };
    return AJS;
})();
module.exports = AJS;

//# sourceMappingURL=data:application/json;base64,
