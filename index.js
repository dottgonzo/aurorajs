"use strict";
var exec = require("promised-exec");
var Promise = require("bluebird");
var Os = require("os");
var lsusbdev = require("lsusbdev");
var async = require("async");
function checking(checkanswer, cmd) {
    return new Promise(function (resolve, reject) {
        exec(cmd).then(function (data) {
            var lines = data.split("\n");
            for (var i = 0; i < lines.length; i++) {
                if (lines[i].split("erial Number:").length > 1) {
                    checkanswer.serial = lines[i].split("erial Number: ")[1];
                }
                if (lines[i].split("irmware:").length > 1) {
                    checkanswer.firmware = lines[i].split("irmware: ")[1];
                }
                if (lines[i].split("anufacturing Date:").length > 1) {
                    checkanswer.dateprod = lines[i].split("anufacturing Date: ")[1];
                }
            }
            if (checkanswer.serial && checkanswer.serial !== "" && checkanswer.firmware && checkanswer.firmware !== "" && checkanswer.dateprod && checkanswer.dateprod !== "") {
                resolve(checkanswer);
            }
            else {
                reject("malformed answer");
            }
        }).catch(function (err) {
            reject(err);
        });
    });
}
function prepare_address(addresses) {
    var readdr = [];
    for (var i = 0; i < addresses.length; i++) {
        readdr[i] = { uuid: addresses[i].uuid, dev: addresses[i].hub, address: addresses[i].address };
    }
    return JSON.stringify(readdr);
}
var AJS = (function () {
    function AJS(addresses, timezone, exe) {
        this.addresses = addresses;
        this.timezone = timezone;
        var cmd;
        if (exe) {
            cmd = exe;
        }
        else {
            if (Os.arch() === "arm") {
                cmd = __dirname + "/bin/rasp2/aurora.bin";
            }
            else if (Os.arch() === "x64") {
                cmd = __dirname + "/bin/x64/aurora.bin";
            }
            else if (Os.arch() === "ia32") {
                cmd = __dirname + "/bin/ia32/aurora.bin";
            }
            else {
                cmd = "aurora";
            }
        }
        this.exec = cmd;
    }
    AJS.prototype.data = function () {
        var exe = this.exec;
        var timezone = this.timezone;
        var prepared_addresses = prepare_address(this.addresses);
        var that = this;
        return new Promise(function (resolve, reject) {
            if (!that.addresses[0].serial) {
                that.checkAll().then(function (a) {
                    that.addresses = a;
                    exec(__dirname + "/aurora.sh -a \"" + prepared_addresses + "\" -t \"" + timezone + "\" -e \"" + exe + "\"").then(function (data) {
                        var apians = JSON.parse(data);
                        for (var i = 0; i < apians.length; i++) {
                            for (var f = 0; f < a.length; f++) {
                                if (apians[i].uid === a[f].uuid) {
                                    apians[i].firmware = a[f].firmware;
                                    apians[i].dateprod = a[f].dateprod;
                                    apians[i].serial = a[f].serial;
                                    apians[i].address = a[f].address;
                                }
                            }
                        }
                        resolve(apians);
                    }).catch(function (err) {
                        reject(err);
                    });
                }).catch(function () {
                    exec(__dirname + "/aurora.sh -a \"" + prepared_addresses + "\" -t \"" + timezone + "\" -e \"" + exe + "\"").then(function (data) {
                        resolve(JSON.parse(data));
                    }).catch(function (err) {
                        reject(err);
                    });
                });
            }
            else {
                var a_1 = that.addresses;
                exec(__dirname + "/aurora.sh -a \"" + prepared_addresses + "\" -t \"" + timezone + "\" -e \"" + exe + "\"").then(function (data) {
                    var apians = JSON.parse(data);
                    for (var i = 0; i < apians.length; i++) {
                        for (var f = 0; f < a_1.length; f++) {
                            if (apians[i].uid === a_1[f].uuid) {
                                apians[i].firmware = a_1[f].firmware;
                                apians[i].dateprod = a_1[f].dateprod;
                                apians[i].serial = a_1[f].serial;
                                apians[i].address = a_1[f].address;
                            }
                        }
                    }
                    resolve(apians);
                }).catch(function (err) {
                    reject(err);
                });
            }
        });
    };
    AJS.prototype.check = function (uuid) {
        if (!uuid)
            throw Error("no uid provided");
        var exe = this.exec;
        var addresses = this.addresses;
        var checkanswer = { uuid: uuid };
        return new Promise(function (resolve, reject) {
            for (var i = 0; i < addresses.length; i++) {
                if (addresses[i].uuid === uuid) {
                    checkanswer.hub = addresses[i].hub;
                    checkanswer.address = addresses[i].address;
                }
            }
            lsusbdev().then(function (devis) {
                for (var i = 0; i < devis.length; i++) {
                    if (devis[i].hub === checkanswer.hub) {
                        checkanswer.dev = devis[i].dev;
                    }
                }
                var cmd = exe + " -a " + checkanswer.address + " -Y 20 -n -f -g " + checkanswer.dev;
                checking(checkanswer, cmd).then(function (a) {
                    resolve(a);
                }).catch(function () {
                    checking(checkanswer, cmd).then(function (a) {
                        resolve(a);
                    }).catch(function () {
                        checking(checkanswer, cmd).then(function (a) {
                            resolve(a);
                        }).catch(function () {
                            checking(checkanswer, cmd).then(function (a) {
                                resolve(a);
                            }).catch(function (err) {
                                reject(err);
                            });
                        });
                    });
                });
            }).catch(function (err) {
                console.error("errrrrr2");
                reject(err);
            });
        });
    };
    AJS.prototype.checkAll = function () {
        var addresses = this.addresses;
        var that = this;
        var allanswers = [];
        return new Promise(function (resolve, reject) {
            async.each(addresses, function (iterator, callback) {
                that.check(iterator.uuid).then(function (chkansw) {
                    allanswers.push(chkansw);
                    callback();
                }).catch(function () {
                    callback();
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(allanswers);
                }
            });
        });
    };
    AJS.prototype.reconfigure = function (opt) {
        if (opt) {
            if (opt.addresses)
                this.addresses = opt.addresses;
            if (opt.timezone)
                this.timezone = opt.timezone;
            if (opt.exec)
                this.exec = opt.exec;
        }
    };
    return AJS;
}());
module.exports = AJS;

//# sourceMappingURL=data:application/json;base64,
